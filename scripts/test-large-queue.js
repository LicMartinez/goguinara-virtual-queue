// Script para probar el sistema con m√°s de 50 personas
const BASE_URL = 'http://localhost:3001';

// Generar nombres aleatorios
const nombres = [
  'Mar√≠a Garc√≠a', 'Carlos L√≥pez', 'Ana Rodr√≠guez', 'Luis Mart√≠nez', 'Carmen S√°nchez',
  'Jos√© Gonz√°lez', 'Isabel Fern√°ndez', 'Antonio P√©rez', 'Pilar Ruiz', 'Francisco D√≠az',
  'Teresa Moreno', 'Manuel Jim√©nez', 'Rosa √Ålvarez', 'Pedro Romero', 'Dolores Navarro',
  'Juan Torres', 'Concepci√≥n Dom√≠nguez', '√Ångel V√°zquez', 'Josefa Ramos', 'Alejandro Gil',
  'Mercedes Serrano', 'Rafael Blanco', 'Antonia Molina', 'Tom√°s Morales', 'Francisca Ortega',
  'Daniel Delgado', 'Paula Castro', 'Javier Ortiz', 'Luc√≠a Rubio', 'Miguel Sanz',
  'Elena Iglesias', 'Sergio Guerrero', 'Cristina Cano', 'Rub√©n Prieto', 'Silvia M√©ndez',
  'Adri√°n Cruz', 'Natalia Flores', 'Iv√°n Herrera', 'Beatriz Gallego', '√ìscar Pe√±a',
  'M√≥nica Santana', 'V√≠ctor Lozano', 'Raquel Gim√©nez', 'Gonzalo Mar√≠n', 'Nuria Vargas',
  'Marcos Castillo', 'Irene Le√≥n', 'Pablo Herrero', 'Esther Cabrera', 'Diego Bernal',
  'Alicia Vega', '√Ålvaro Rom√°n', 'Roc√≠o Ib√°√±ez', 'Emilio Garrido', 'Amparo Carmona'
];

async function registerPerson(name, phone) {
  try {
    const response = await fetch(`${BASE_URL}/api/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name, phone })
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log(`‚úÖ ${name} registrado - Posici√≥n: ${data.position}, Tiempo: ${data.estimatedWaitTime}min`);
      return { success: true, data };
    } else {
      console.log(`‚ùå Error registrando ${name}: ${data.error}`);
      return { success: false, error: data.error };
    }
  } catch (error) {
    console.log(`‚ùå Error de conexi√≥n para ${name}: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function testLargeQueue() {
  console.log('üß™ Iniciando prueba con m√°s de 50 personas...\n');

  const totalPersonas = 55; // M√°s de 50 para probar el l√≠mite
  const registros = [];

  console.log(`üìù Registrando ${totalPersonas} personas...`);

  for (let i = 0; i < totalPersonas; i++) {
    const nombre = nombres[i % nombres.length] + ` ${Math.floor(i / nombres.length) + 1}`;
    const telefono = `300${String(1000000 + i).padStart(7, '0')}`;
    
    const resultado = await registerPerson(nombre, telefono);
    registros.push(resultado);

    // Peque√±a pausa para no sobrecargar el servidor
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // Resumen de resultados
  const exitosos = registros.filter(r => r.success).length;
  const fallidos = registros.filter(r => !r.success).length;

  console.log('\nüìä Resumen de registros:');
  console.log(`‚úÖ Exitosos: ${exitosos}`);
  console.log(`‚ùå Fallidos: ${fallidos}`);

  if (exitosos > 50) {
    console.log('üéâ ¬°√âxito! El sistema puede manejar m√°s de 50 personas');
  } else {
    console.log('‚ö†Ô∏è  El sistema parece tener limitaciones');
  }

  // Verificar estado de la fila
  console.log('\nüîç Verificando estado de la fila...');
  try {
    const response = await fetch(`${BASE_URL}/api/queue`);
    const queueData = await response.json();
    
    if (response.ok) {
      console.log(`üìã Total en fila: ${queueData.stats.totalWaiting}`);
      console.log(`‚è±Ô∏è  Tiempo promedio: ${queueData.stats.averageWaitTime} min/persona`);
      console.log(`üïê Tiempo total estimado: ${queueData.stats.estimatedWaitTime} minutos`);
      
      if (queueData.queue.length > 50) {
        console.log('‚úÖ Confirmado: M√°s de 50 personas en la fila');
      }
    } else {
      console.log('‚ùå Error al obtener estado de la fila:', queueData.error);
    }
  } catch (error) {
    console.log('‚ùå Error al verificar fila:', error.message);
  }

  console.log('\nüéØ Prueba completada!');
}

// Funci√≥n para limpiar la fila (opcional)
async function clearQueue() {
  console.log('üßπ Esta funci√≥n requiere acceso directo a Google Sheets para limpiar datos');
  console.log('üí° Puedes limpiar manualmente el Google Sheet si necesitas reiniciar');
}

// Ejecutar prueba
testLargeQueue().catch(error => {
  console.log('‚ùå Error general:', error.message);
  console.log('üí° Aseg√∫rate de que el servidor est√© corriendo en http://localhost:3001');
});